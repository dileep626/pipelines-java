# Maven
# Build your Java projects and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

pool:
  vmImage: 'Ubuntu 16.04'
  
variables:
  imageName: 'javatest:$(Build.BuildId)'
  dockerId: 'setest'
  dockerPassword: 'LVR2B8=K9CDMPPNLeGiYUDYxBDKcsYLA'
  # define two more variables dockerId and dockerPassword in the build pipeline in UI

steps:
- task: InMobi-SoftwareExcellence.build-release-task.custom-build-release-task-1.InMobi_PR_ID_Check@0
  displayName: 'Echo test'
  inputs:
    pr_id: 'test'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    # mavenOptions: '-Xmx3072m'
    # javaHomeOption: 'JDKVersion'
    # jdkVersionOption: '1.10'
    # jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    goals: 'package'
    checkStyleRunAnalysis: true
    pmdRunAnalysis: true
    findBugsRunAnalysis: true

# Publish Cobertura or JaCoCo code coverage results from a build
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo' 
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/site/jacoco/jacoco.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/site/jacoco'
    failIfCoverageEmpty: true

- script: |
    docker build -f Dockerfile -t $(dockerId).azurecr.io/$(imageName) .
    docker login -u $(dockerId) -p $pswd $(dockerId).azurecr.io
    docker push $(dockerId).azurecr.io/$(imageName)
  env:
    pswd: $(dockerPassword)

- task: kasunkodagoda.slack-notification.slack-notification-task.SlackNotification@5
  displayName: 'Post Slack Notification'
  inputs:
    SlackApiToken: 'xoxp-2168058097-514931879073-536195818438-38cdfecce3fe9fb9ca3854f146a4dd6b'
    Channel: 'Dilip Reddy'
    Message: 'Build - $(Build.BuildId) complete; Status: $(Agent.JobStatus)'
  condition: succeededOrFailed()